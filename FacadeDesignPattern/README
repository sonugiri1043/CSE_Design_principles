Facade Design Pattern
A facade is an object that provides a simplified interface to a larger body of code, such as a class library. A facade can:
* make a software library easier to use, understand and test, since the facade has convenient methods for common tasks;
* make the library more readable, for the same reason;
* reduce dependencies of outside code on the inner workings of a library, since most code uses the facade,
  thus allowing more flexibility in developing the system;
* wrap a poorly designed collection of APIs with a single well-designed API (as per task needs).

The Facade design pattern is often used when a system is very complex or difficult to understand because the system has a large number
 of interdependent classes or its source code is unavailable. This pattern hides the complexities of the larger system and provides a
 simpler interface to the client. It typically involves a single wrapper class which contains a set of members required by client.
 These members access the system on behalf of the facade client and hide the implementation details. This reduces the learning curve
 necessary to successfully leverage the subsystem. 

What problems can the Facade design pattern solve?
* To make a complex subsystem easier to use, a simple interface should be provided for a set of interfaces in the subsystem.
* The dependencies on a subsystem should be minimized.

Define a Facade objec
* implements a simple interface in terms of (by delegating to) the interfaces in the subsystem and
* may perform additional functionality before/after forwarding a request.
